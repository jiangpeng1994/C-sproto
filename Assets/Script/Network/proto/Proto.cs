// Generated by sprotodump. DO NOT EDIT!
// source: sproto.lua

using System;
using Sproto;
using System.Collections.Generic;

namespace ProtoSprotoType { 
	public class auth {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private string _challenge; // tag 0
			public string challenge {
				get { return _challenge; }
				set { base.has_field.set_field (0, true); _challenge = value; }
			}
			public bool HasChallenge {
				get { return base.has_field.has_field (0); }
			}

			private string _password; // tag 1
			public string password {
				get { return _password; }
				set { base.has_field.set_field (1, true); _password = value; }
			}
			public bool HasPassword {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.challenge = base.deserialize.read_string ();
						break;
					case 1:
						this.password = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.challenge, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.password, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 3;
			
			
			private Int64 _session; // tag 0
			public Int64 session {
				get { return _session; }
				set { base.has_field.set_field (0, true); _session = value; }
			}
			public bool HasSession {
				get { return base.has_field.has_field (0); }
			}

			private Int64 _expire; // tag 1
			public Int64 expire {
				get { return _expire; }
				set { base.has_field.set_field (1, true); _expire = value; }
			}
			public bool HasExpire {
				get { return base.has_field.has_field (1); }
			}

			private string _challenge; // tag 2
			public string challenge {
				get { return _challenge; }
				set { base.has_field.set_field (2, true); _challenge = value; }
			}
			public bool HasChallenge {
				get { return base.has_field.has_field (2); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.session = base.deserialize.read_integer ();
						break;
					case 1:
						this.expire = base.deserialize.read_integer ();
						break;
					case 2:
						this.challenge = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.session, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_integer (this.expire, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_string (this.challenge, 2);
				}

				return base.serialize.close ();
			}
		}


	}


	public class challenge {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _session; // tag 0
			public Int64 session {
				get { return _session; }
				set { base.has_field.set_field (0, true); _session = value; }
			}
			public bool HasSession {
				get { return base.has_field.has_field (0); }
			}

			private string _challenge; // tag 1
			public string challenge {
				get { return _challenge; }
				set { base.has_field.set_field (1, true); _challenge = value; }
			}
			public bool HasChallenge {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.session = base.deserialize.read_integer ();
						break;
					case 1:
						this.challenge = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.session, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.challenge, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private string _token; // tag 0
			public string token {
				get { return _token; }
				set { base.has_field.set_field (0, true); _token = value; }
			}
			public bool HasToken {
				get { return base.has_field.has_field (0); }
			}

			private string _challenge; // tag 1
			public string challenge {
				get { return _challenge; }
				set { base.has_field.set_field (1, true); _challenge = value; }
			}
			public bool HasChallenge {
				get { return base.has_field.has_field (1); }
			}

			private string _ip; // tag 2
			public string ip {
				get { return _ip; }
				set { base.has_field.set_field (2, true); _ip = value; }
			}
			public bool HasIp {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _port; // tag 3
			public Int64 port {
				get { return _port; }
				set { base.has_field.set_field (3, true); _port = value; }
			}
			public bool HasPort {
				get { return base.has_field.has_field (3); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.token = base.deserialize.read_string ();
						break;
					case 1:
						this.challenge = base.deserialize.read_string ();
						break;
					case 2:
						this.ip = base.deserialize.read_string ();
						break;
					case 3:
						this.port = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.token, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.challenge, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_string (this.ip, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.port, 3);
				}

				return base.serialize.close ();
			}
		}


	}


	public class handshake {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private string _account; // tag 0
			public string account {
				get { return _account; }
				set { base.has_field.set_field (0, true); _account = value; }
			}
			public bool HasAccount {
				get { return base.has_field.has_field (0); }
			}

			private string _client_pub; // tag 1
			public string client_pub {
				get { return _client_pub; }
				set { base.has_field.set_field (1, true); _client_pub = value; }
			}
			public bool HasClient_pub {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.account = base.deserialize.read_string ();
						break;
					case 1:
						this.client_pub = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.account, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.client_pub, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private bool _user_exists; // tag 0
			public bool user_exists {
				get { return _user_exists; }
				set { base.has_field.set_field (0, true); _user_exists = value; }
			}
			public bool HasUser_exists {
				get { return base.has_field.has_field (0); }
			}

			private string _salt; // tag 1
			public string salt {
				get { return _salt; }
				set { base.has_field.set_field (1, true); _salt = value; }
			}
			public bool HasSalt {
				get { return base.has_field.has_field (1); }
			}

			private string _server_pub; // tag 2
			public string server_pub {
				get { return _server_pub; }
				set { base.has_field.set_field (2, true); _server_pub = value; }
			}
			public bool HasServer_pub {
				get { return base.has_field.has_field (2); }
			}

			private string _challenge; // tag 3
			public string challenge {
				get { return _challenge; }
				set { base.has_field.set_field (3, true); _challenge = value; }
			}
			public bool HasChallenge {
				get { return base.has_field.has_field (3); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.user_exists = base.deserialize.read_boolean ();
						break;
					case 1:
						this.salt = base.deserialize.read_string ();
						break;
					case 2:
						this.server_pub = base.deserialize.read_string ();
						break;
					case 3:
						this.challenge = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.user_exists, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.salt, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_string (this.server_pub, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_string (this.challenge, 3);
				}

				return base.serialize.close ();
			}
		}


	}


	public class heartbeat {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private bool _status; // tag 0
			public bool status {
				get { return _status; }
				set { base.has_field.set_field (0, true); _status = value; }
			}
			public bool HasStatus {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.status = base.deserialize.read_boolean ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.status, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class login {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private Int64 _session; // tag 0
			public Int64 session {
				get { return _session; }
				set { base.has_field.set_field (0, true); _session = value; }
			}
			public bool HasSession {
				get { return base.has_field.has_field (0); }
			}

			private string _token; // tag 1
			public string token {
				get { return _token; }
				set { base.has_field.set_field (1, true); _token = value; }
			}
			public bool HasToken {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.session = base.deserialize.read_integer ();
						break;
					case 1:
						this.token = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.session, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.token, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 1;
			
			
			private bool _status; // tag 0
			public bool status {
				get { return _status; }
				set { base.has_field.set_field (0, true); _status = value; }
			}
			public bool HasStatus {
				get { return base.has_field.has_field (0); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.status = base.deserialize.read_boolean ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_boolean (this.status, 0);
				}

				return base.serialize.close ();
			}
		}


	}


	public class logintest {
	
		public class request : SprotoTypeBase {
			private static int max_field_count = 2;
			
			
			private string _account; // tag 0
			public string account {
				get { return _account; }
				set { base.has_field.set_field (0, true); _account = value; }
			}
			public bool HasAccount {
				get { return base.has_field.has_field (0); }
			}

			private string _password; // tag 1
			public string password {
				get { return _password; }
				set { base.has_field.set_field (1, true); _password = value; }
			}
			public bool HasPassword {
				get { return base.has_field.has_field (1); }
			}

			public request () : base(max_field_count) {}

			public request (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.account = base.deserialize.read_string ();
						break;
					case 1:
						this.password = base.deserialize.read_string ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_string (this.account, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.password, 1);
				}

				return base.serialize.close ();
			}
		}


		public class response : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _session; // tag 0
			public Int64 session {
				get { return _session; }
				set { base.has_field.set_field (0, true); _session = value; }
			}
			public bool HasSession {
				get { return base.has_field.has_field (0); }
			}

			private string _token; // tag 1
			public string token {
				get { return _token; }
				set { base.has_field.set_field (1, true); _token = value; }
			}
			public bool HasToken {
				get { return base.has_field.has_field (1); }
			}

			private string _ip; // tag 2
			public string ip {
				get { return _ip; }
				set { base.has_field.set_field (2, true); _ip = value; }
			}
			public bool HasIp {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _port; // tag 3
			public Int64 port {
				get { return _port; }
				set { base.has_field.set_field (3, true); _port = value; }
			}
			public bool HasPort {
				get { return base.has_field.has_field (3); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.session = base.deserialize.read_integer ();
						break;
					case 1:
						this.token = base.deserialize.read_string ();
						break;
					case 2:
						this.ip = base.deserialize.read_string ();
						break;
					case 3:
						this.port = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.session, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.token, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_string (this.ip, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.port, 3);
				}

				return base.serialize.close ();
			}
		}


	}


	public class package : SprotoTypeBase {
		private static int max_field_count = 2;
		
		
		private Int64 _type; // tag 0
		public Int64 type {
			get { return _type; }
			set { base.has_field.set_field (0, true); _type = value; }
		}
		public bool HasType {
			get { return base.has_field.has_field (0); }
		}

		private Int64 _session; // tag 1
		public Int64 session {
			get { return _session; }
			set { base.has_field.set_field (1, true); _session = value; }
		}
		public bool HasSession {
			get { return base.has_field.has_field (1); }
		}

		public package () : base(max_field_count) {}

		public package (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.type = base.deserialize.read_integer ();
					break;
				case 1:
					this.session = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.type, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_integer (this.session, 1);
			}

			return base.serialize.close ();
		}
	}


	public class role_info : SprotoTypeBase {
		private static int max_field_count = 4;
		
		
		private Int64 _role_id; // tag 0
		public Int64 role_id {
			get { return _role_id; }
			set { base.has_field.set_field (0, true); _role_id = value; }
		}
		public bool HasRole_id {
			get { return base.has_field.has_field (0); }
		}

		private string _nickname; // tag 1
		public string nickname {
			get { return _nickname; }
			set { base.has_field.set_field (1, true); _nickname = value; }
		}
		public bool HasNickname {
			get { return base.has_field.has_field (1); }
		}

		private Int64 _race; // tag 2
		public Int64 race {
			get { return _race; }
			set { base.has_field.set_field (2, true); _race = value; }
		}
		public bool HasRace {
			get { return base.has_field.has_field (2); }
		}

		private Int64 _level; // tag 3
		public Int64 level {
			get { return _level; }
			set { base.has_field.set_field (3, true); _level = value; }
		}
		public bool HasLevel {
			get { return base.has_field.has_field (3); }
		}

		public role_info () : base(max_field_count) {}

		public role_info (byte[] buffer) : base(max_field_count, buffer) {
			this.decode ();
		}

		protected override void decode () {
			int tag = -1;
			while (-1 != (tag = base.deserialize.read_tag ())) {
				switch (tag) {
				case 0:
					this.role_id = base.deserialize.read_integer ();
					break;
				case 1:
					this.nickname = base.deserialize.read_string ();
					break;
				case 2:
					this.race = base.deserialize.read_integer ();
					break;
				case 3:
					this.level = base.deserialize.read_integer ();
					break;
				default:
					base.deserialize.read_unknow_data ();
					break;
				}
			}
		}

		public override int encode (SprotoStream stream) {
			base.serialize.open (stream);

			if (base.has_field.has_field (0)) {
				base.serialize.write_integer (this.role_id, 0);
			}

			if (base.has_field.has_field (1)) {
				base.serialize.write_string (this.nickname, 1);
			}

			if (base.has_field.has_field (2)) {
				base.serialize.write_integer (this.race, 2);
			}

			if (base.has_field.has_field (3)) {
				base.serialize.write_integer (this.level, 3);
			}

			return base.serialize.close ();
		}
	}


	public class travelerLogin {
	
		public class response : SprotoTypeBase {
			private static int max_field_count = 4;
			
			
			private Int64 _session; // tag 0
			public Int64 session {
				get { return _session; }
				set { base.has_field.set_field (0, true); _session = value; }
			}
			public bool HasSession {
				get { return base.has_field.has_field (0); }
			}

			private string _token; // tag 1
			public string token {
				get { return _token; }
				set { base.has_field.set_field (1, true); _token = value; }
			}
			public bool HasToken {
				get { return base.has_field.has_field (1); }
			}

			private string _ip; // tag 2
			public string ip {
				get { return _ip; }
				set { base.has_field.set_field (2, true); _ip = value; }
			}
			public bool HasIp {
				get { return base.has_field.has_field (2); }
			}

			private Int64 _port; // tag 3
			public Int64 port {
				get { return _port; }
				set { base.has_field.set_field (3, true); _port = value; }
			}
			public bool HasPort {
				get { return base.has_field.has_field (3); }
			}

			public response () : base(max_field_count) {}

			public response (byte[] buffer) : base(max_field_count, buffer) {
				this.decode ();
			}

			protected override void decode () {
				int tag = -1;
				while (-1 != (tag = base.deserialize.read_tag ())) {
					switch (tag) {
					case 0:
						this.session = base.deserialize.read_integer ();
						break;
					case 1:
						this.token = base.deserialize.read_string ();
						break;
					case 2:
						this.ip = base.deserialize.read_string ();
						break;
					case 3:
						this.port = base.deserialize.read_integer ();
						break;
					default:
						base.deserialize.read_unknow_data ();
						break;
					}
				}
			}

			public override int encode (SprotoStream stream) {
				base.serialize.open (stream);

				if (base.has_field.has_field (0)) {
					base.serialize.write_integer (this.session, 0);
				}

				if (base.has_field.has_field (1)) {
					base.serialize.write_string (this.token, 1);
				}

				if (base.has_field.has_field (2)) {
					base.serialize.write_string (this.ip, 2);
				}

				if (base.has_field.has_field (3)) {
					base.serialize.write_integer (this.port, 3);
				}

				return base.serialize.close ();
			}
		}


	}


}


public class ProtoProtocol : ProtocolBase {
	public static  ProtoProtocol Instance = new ProtoProtocol();
	private ProtoProtocol() {
		Protocol.SetProtocol<auth> (auth.Tag);
		Protocol.SetRequest<ProtoSprotoType.auth.request> (auth.Tag);
		Protocol.SetResponse<ProtoSprotoType.auth.response> (auth.Tag);

		Protocol.SetProtocol<challenge> (challenge.Tag);
		Protocol.SetRequest<ProtoSprotoType.challenge.request> (challenge.Tag);
		Protocol.SetResponse<ProtoSprotoType.challenge.response> (challenge.Tag);

		Protocol.SetProtocol<handshake> (handshake.Tag);
		Protocol.SetRequest<ProtoSprotoType.handshake.request> (handshake.Tag);
		Protocol.SetResponse<ProtoSprotoType.handshake.response> (handshake.Tag);

		Protocol.SetProtocol<heartbeat> (heartbeat.Tag);
		Protocol.SetResponse<ProtoSprotoType.heartbeat.response> (heartbeat.Tag);

		Protocol.SetProtocol<login> (login.Tag);
		Protocol.SetRequest<ProtoSprotoType.login.request> (login.Tag);
		Protocol.SetResponse<ProtoSprotoType.login.response> (login.Tag);

		Protocol.SetProtocol<logintest> (logintest.Tag);
		Protocol.SetRequest<ProtoSprotoType.logintest.request> (logintest.Tag);
		Protocol.SetResponse<ProtoSprotoType.logintest.response> (logintest.Tag);

		Protocol.SetProtocol<sync_role_offline> (sync_role_offline.Tag);

		Protocol.SetProtocol<travelerLogin> (travelerLogin.Tag);
		Protocol.SetResponse<ProtoSprotoType.travelerLogin.response> (travelerLogin.Tag);

	}

	public class auth {
		public const int Tag = 2;
	}

	public class challenge {
		public const int Tag = 3;
	}

	public class handshake {
		public const int Tag = 1;
	}

	public class heartbeat {
		public const int Tag = 199;
	}

	public class login {
		public const int Tag = 4;
	}

	public class logintest {
		public const int Tag = 5;
	}

	public class sync_role_offline {
		public const int Tag = 300;
	}

	public class travelerLogin {
		public const int Tag = 6;
	}

}